<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


	<!-- On indique le package qui doit être traité par Spring car contient les annotations Spring -->
<context:component-scan base-package="dao"></context:component-scan>

	<!-- Location du fichier de configuration qui permet d'avoir, ici, un fichier avec des informations figées, ce qui est préférable car ce fichier comporte des infos sensibles-->
<context:property-placeholder location="config.properties" />
	
	<!-- On active les annotations @Transactional avec transactionManager -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- On active la gestion par Spring de toute la DAO JPA -->
	<jpa:repositories base-package="repo"></jpa:repositories>

	<!-- activation les annotations -->
	<context:annotation-config></context:annotation-config>
	
	<!-- On crée le DataSource -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<!-- On fait référence au fichier de configuration des propriétés avec ${db.driver} -->
		<property name="driverClassName" value="${db.driver}" />
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<property name="maxTotal" value="${pool.maxTotal}" />
	</bean>

	<!-- On crée un entityManagerFactory local à partir de la dataSource -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="model" />
		<!-- On précise le provider ... -->
		<property name="jpaVendorAdapter">
	<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<!-- On précise les propriétés ... -->
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.dialect">${db.dialect}</prop>
				<prop key="hibernate.show_sql">${db.showSql}</prop>
				<prop key="hibernate.format_sql">${db.formatSql}</prop>
			</props>
		</property>
	</bean>

	<!-- On crée le transactionManager pour JPA avec entityManagerFactory -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	
	<!-- On active la translation d'exception -->
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
	

</beans>
